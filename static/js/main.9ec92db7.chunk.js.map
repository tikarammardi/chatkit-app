{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","index","components_Message","key","id","senderId","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","room","active","onClick","subscribeToRoom","name","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","console","log","catch","err","_this3","getJoinableRooms","_this4","hooks","onNewMessage","concat","onUserStartedTyping","user","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAWeA,MATf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBJ,EAAMK,UACzCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBJ,EAAMM,QCkClCC,gMAjCP,IAAMC,EAAOC,IAASC,YAAYC,MAClCA,KAAKC,qBAAuBJ,EAAKK,UAAYL,EAAKM,aAAe,KAAON,EAAKO,0DAI7E,GAAIJ,KAAKC,qBAAsB,CAC3B,IAAMJ,EAAOC,IAASC,YAAYC,MAClCH,EAAKK,UAAYL,EAAKO,+CAK1B,OAAKJ,KAAKX,MAAMgB,OAUZf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVO,KAAKX,MAAMiB,SAASC,IAAI,SAACC,EAASC,GAC/B,OACInB,EAAAC,EAAAC,cAACkB,EAAD,CAASC,IAAKH,EAAQI,GAAIlB,SAAUc,EAAQK,SAAUlB,KAAMa,EAAQb,UAX5EL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,+BAlBMqB,IAAMC,WCuCjBC,cAvCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,QACKuB,MAAQ,CACTf,QAAS,IAEbS,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IANVA,4EASDW,GACT5B,KAAK6B,SAAS,CACVrB,QAASoB,EAAEE,OAAOC,6CAIbH,GACTA,EAAEI,iBACFhC,KAAKX,MAAM4C,YAAYjC,KAAKuB,MAAMf,SAClCR,KAAK6B,SAAS,CACVrB,QAAS,sCAKb,OACIlB,EAAAC,EAAAC,cAAA,QACI0C,SAAUlC,KAAK2B,aACflC,UAAU,qBACVH,EAAAC,EAAAC,cAAA,SACI2C,SAAUnC,KAAKX,MAAM8C,SACrBC,SAAUpC,KAAKwB,aACfO,MAAO/B,KAAKuB,MAAMf,QAClB6B,YAAY,kCACZC,KAAK,iBAnCKxB,IAAMC,WCuBrBwB,mLAtBJ,IAAAtB,EAAAjB,KACDwC,EAAetB,OAAAuB,EAAA,EAAAvB,CAAIlB,KAAKX,MAAMqD,OAAOC,KAAK,SAACpD,EAAGqD,GAAJ,OAAUrD,EAAEqB,GAAKgC,EAAEhC,KACnE,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,yBACCgD,EAAajC,IAAI,SAAAsC,GAChB,IAAMC,EAASD,EAAKjC,KAAOK,EAAK5B,MAAMgB,OAAS,SAAW,GAC1D,OACEf,EAAAC,EAAAC,cAAA,MAAImB,IAAKkC,EAAKjC,GAAInB,UAAW,QAAUqD,GACrCxD,EAAAC,EAAAC,cAAA,KAAGuD,QAAS,kBAAM9B,EAAK5B,MAAM2D,gBAAgBH,EAAKjC,MAAlD,KACKiC,EAAKI,kBAZHnC,IAAMC,WCwCdmC,cAtCX,SAAAA,IAAc,IAAAjC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAkD,IACVjC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAgC,GAAA5B,KAAAtB,QACKuB,MAAQ,CACT4B,SAAU,IAEdlC,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IANVA,4EASDW,GACT5B,KAAK6B,SAAS,CACVsB,SAAUvB,EAAEE,OAAOC,6CAIdH,GACTA,EAAEI,iBACFhC,KAAKX,MAAM+D,WAAWpD,KAAKuB,MAAM4B,UACjCnD,KAAK6B,SAAS,CAACsB,SAAU,sCAIzB,OACI7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,QAAM0C,SAAUlC,KAAK2B,cACjBrC,EAAAC,EAAAC,cAAA,SACIuC,MAAO/B,KAAKuB,MAAM4B,SAClBf,SAAUpC,KAAKwB,aACfc,KAAK,OACLD,YAAY,gBACZgB,UAAQ,IACZ/D,EAAAC,EAAAC,cAAA,UAAQoB,GAAG,kBAAkB0B,KAAK,UAAlC,cAjCMxB,IAAMC,WCsHjBuC,cA9Gb,SAAAA,IAAc,IAAArC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAsD,IACZrC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAoC,GAAAhC,KAAAtB,QACKuB,MAAQ,CACXlB,OAAQ,KACRC,SAAU,GACViD,cAAe,GACfC,YAAa,IAEfvC,EAAKgB,YAAchB,EAAKgB,YAAYR,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAK+B,gBAAkB/B,EAAK+B,gBAAgBvB,KAArBP,OAAAQ,EAAA,EAAAR,CAAAD,IACvBA,EAAKwC,SAAWxC,EAAKwC,SAAShC,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAChBA,EAAKmC,WAAanC,EAAKmC,WAAW3B,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAXNA,mFAcM,IAAAyC,EAAA1D,KACE,IAAI2D,IAAQC,YAAY,CAC1CC,gBCxBkB,8CDyBlBC,OAAQ,eACRC,cAAe,IAAIJ,IAAQK,cAAc,CACvCC,IC5BN,kHDiCKC,UACAC,KAAK,SAAAC,GACJV,EAAKU,YAAcA,EACnBC,QAAQC,IAAIZ,EAAKU,aACjBV,EAAKD,aAENc,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,wBAAyBE,wCAG5C,IAAAC,EAAAzE,KACTA,KAAKoE,YACFM,mBACAP,KAAK,SAAAZ,GACJkB,EAAK5C,SAAS,CACZ0B,gBACAC,YAAaiB,EAAKL,YAAY1B,UAGjC6B,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,2BAA4BE,6CAG1CnE,GAAQ,IAAAsE,EAAA3E,KACtBA,KAAK6B,SAAS,CAAEvB,SAAU,KAC1BN,KAAKoE,YACFpB,gBAAgB,CACf3C,OAAQA,EACRuE,MAAO,CACLC,aAAc,SAAArE,GACZmE,EAAK9C,SAAS,CACZvB,SAAQ,GAAAwE,OAAA5D,OAAAuB,EAAA,EAAAvB,CAAMyD,EAAKpD,MAAMjB,UAAjB,CAA2BE,OAGvCuE,oBAAqB,SAAAC,QAKxBb,KAAK,SAAAtB,GACJ8B,EAAK9C,SAAS,CACZxB,OAAQwC,EAAKjC,KAEf+D,EAAKlB,aAENc,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,iCAAkCE,yCAGpD7E,GACVK,KAAKoE,YAAYnC,YAAY,CAC3BtC,OACAU,OAAQL,KAAKuB,MAAMlB,4CAIZ4C,GAAM,IAAAgC,EAAAjF,KACfA,KAAKoE,YACFhB,WAAW,CACVH,SAEDkB,KAAK,SAAAtB,GACJoC,EAAKjC,gBAAgBH,EAAKjC,MAE3B2D,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,0BAA2BE,sCAIvD,OACElF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0F,EAAD,CACElC,gBAAiBhD,KAAKgD,gBACtBN,MAAK,GAAAoC,OAAA5D,OAAAuB,EAAA,EAAAvB,CAAMlB,KAAKuB,MAAMgC,eAAjBrC,OAAAuB,EAAA,EAAAvB,CAAmClB,KAAKuB,MAAMiC,cACnDnD,OAAQL,KAAKuB,MAAMlB,SAErBf,EAAAC,EAAAC,cAAC2F,EAAD,CACE9E,OAAQL,KAAKuB,MAAMlB,OACnBC,SAAUN,KAAKuB,MAAMjB,WAEvBhB,EAAAC,EAAAC,cAAC4F,EAAD,CACEjD,UAAWnC,KAAKuB,MAAMlB,OACtB4B,YAAajC,KAAKiC,cAEpB3C,EAAAC,EAAAC,cAAC6F,EAAD,CAAajC,WAAYpD,KAAKoD,qBAzGpBtC,IAAMC,WEGJuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN5F,IAAS6F,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.9ec92db7.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Message(props) {  \n    return (\n        <div className=\"message\">\n            <div className=\"message-username\">{props.username}</div>\n            <div className=\"message-text\">{props.text}</div>\n        </div>\n    )\n}\n\nexport default Message","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Message from './Message'\n\nclass MessageList extends React.Component {\n    \n    componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this)\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\n    }\n    \n    componentDidUpdate() {\n        if (this.shouldScrollToBottom) {\n            const node = ReactDOM.findDOMNode(this)\n            node.scrollTop = node.scrollHeight   \n        }\n    }\n    \n    render() {\n        if (!this.props.roomId) {\n            return (\n                <div className=\"message-list\">\n                    <div className=\"join-room\">\n                        Join a room! &rarr; \n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"message-list\">\n                {this.props.messages.map((message, index) => {\n                    return (\n                        <Message key={message.id} username={message.senderId} text={message.text} />\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default MessageList","import React from 'react'\n\nclass SendMessageForm extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            message: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    handleChange(e) {\n        this.setState({\n            message: e.target.value\n        })\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault()\n        this.props.sendMessage(this.state.message)\n        this.setState({\n            message: ''\n        })\n    }\n    \n    render() {\n        return (\n            <form\n                onSubmit={this.handleSubmit}\n                className=\"send-message-form\">\n                <input\n                    disabled={this.props.disabled}\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Type your message and hit ENTER\"\n                    type=\"text\" />\n            </form>\n        )\n    }\n}\n\nexport default SendMessageForm","import React from 'react';\n\nclass RoomList extends React.Component {\n  render() {\n    const orderedRooms = [...this.props.rooms].sort((a, b) => a.id > b.id);\n    return (\n      <div className=\"rooms-list\">\n        <ul>\n          <h3>Your rooms:</h3>\n          {orderedRooms.map(room => {\n            const active = room.id === this.props.roomId ? 'active' : '';\n            return (\n              <li key={room.id} className={'room ' + active}>\n                <a onClick={() => this.props.subscribeToRoom(room.id)}>\n                  # {room.name}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default RoomList;\n","import React from 'react'\n\nclass NewRoomForm extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            roomName: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    handleChange(e) {\n        this.setState({\n            roomName: e.target.value\n        })\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault()\n        this.props.createRoom(this.state.roomName)\n        this.setState({roomName: ''})\n    }\n    \n    render () {\n        return (\n            <div className=\"new-room-form\">\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        value={this.state.roomName}\n                        onChange={this.handleChange}\n                        type=\"text\" \n                        placeholder=\"Create a room\" \n                        required />\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\n            </form>\n        </div>\n        )\n    }\n}\n\nexport default NewRoomForm","import React from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport NewRoomForm from './components/NewRoomForm';\n\nimport { tokenUrl, instanceLocator } from './config';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: []\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: 'tikarammardi',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl\n      })\n    });\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.currentUser = currentUser;\n        console.log(this.currentUser);\n        this.getRooms();\n      })\n      .catch(err => console.log('error on connecting: ', err));\n  }\n\n  getRooms() {\n    this.currentUser\n      .getJoinableRooms()\n      .then(joinableRooms => {\n        this.setState({\n          joinableRooms,\n          joinedRooms: this.currentUser.rooms\n        });\n      })\n      .catch(err => console.log('error on joinableRooms: ', err));\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({ messages: [] });\n    this.currentUser\n      .subscribeToRoom({\n        roomId: roomId,\n        hooks: {\n          onNewMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          },\n          onUserStartedTyping: user => {\n            /** render out the users */\n          }\n        }\n      })\n      .then(room => {\n        this.setState({\n          roomId: room.id\n        });\n        this.getRooms();\n      })\n      .catch(err => console.log('error on subscribing to room: ', err));\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(name) {\n    this.currentUser\n      .createRoom({\n        name\n      })\n      .then(room => {\n        this.subscribeToRoom(room.id);\n      })\n      .catch(err => console.log('error with createRoom: ', err));\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <RoomList\n          subscribeToRoom={this.subscribeToRoom}\n          rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n          roomId={this.state.roomId}\n        />\n        <MessageList\n          roomId={this.state.roomId}\n          messages={this.state.messages}\n        />\n        <SendMessageForm\n          disabled={!this.state.roomId}\n          sendMessage={this.sendMessage}\n        />\n        <NewRoomForm createRoom={this.createRoom} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenUrl =\r\n  'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/f7d1bdb6-5361-403a-906f-b203fd0a05b4/token';\r\nconst instanceLocator = 'v1:us1:f7d1bdb6-5361-403a-906f-b203fd0a05b4';\r\n\r\nexport { tokenUrl, instanceLocator };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}